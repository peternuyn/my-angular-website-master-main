name: CI/CD Pipeline (Backend Only)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Build Job
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Build Angular application
      run: npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        file: ./server/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scan Job
  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner for backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
        format: 'sarif'
        output: 'trivy-results-backend.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-backend.sarif'

  # Deploy Backend to Production (only on main/master branch)
  deploy-backend-production:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy backend to production server
      run: |
        echo "üöÄ Deploying backend to production..."
        echo "Backend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest"
        echo "Frontend: Deployed via Firebase Hosting (separate workflow)"
        echo "Backend deployment completed successfully!"

    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Backend deployment completed successfully!"
        echo "üåê Frontend: https://my-resume-website-1.web.app (Firebase Hosting)"
        echo "üîß Backend API: http://your-server:3001"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Backend deployment failed!"
        echo "Please check the logs and fix the issues"

  # Deploy Backend to Staging (for PRs)
  deploy-backend-staging:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.event_name == 'pull_request'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy backend to staging server
      run: |
        echo "üöÄ Deploying backend to staging..."
        echo "Backend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}"
        echo "Staging deployment completed!"

    - name: Comment PR with deployment info
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **Deployment completed!**
          
          **Frontend:** Deployed via Firebase Hosting (preview URL available)
          **Backend:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          
          The frontend will be deployed to Firebase Hosting automatically.`
          }) 