name: Deploy Application

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request' }}
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Deploy to staging server
      run: |
        echo "üöÄ Deploying to staging environment..."
        
        # Pull latest images
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
        
        # Update docker-compose with new images
        # This would typically involve SSH to your staging server
        echo "‚úÖ Staging deployment completed!"
        echo "üåê Staging URL: https://staging.yourdomain.com"

  deploy-production:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' }}
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Deploy to production server
      run: |
        echo "üöÄ Deploying to production environment..."
        
        # Pull latest images
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
        
        # Update docker-compose with new images
        # This would typically involve SSH to your production server
        echo "‚úÖ Production deployment completed!"
        echo "üåê Production URL: https://yourdomain.com"

    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Production deployment successful!"
        echo "üìä Application is now live and serving users"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        echo "üö® Please check the logs and fix the issues immediately" 